#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

indent() {
  sed -u 's/^/       /'
}

set -e

# config
NGINX_VERSION="1.2.7"
S3_BUCKET="simplificator-heroku-buildpack-nanoc"

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
BUILDPACK_DIR=`cd $(dirname $0); cd ..; pwd`


# =========> Nanoc

# use ruby version installed by ruby buildpack
export PATH=$HOME/bin:$PATH
export RUBY_DIR=`ruby -e "require 'rbconfig'; puts \"vendor/bundle/#{RUBY_ENGINE}/#{RbConfig::CONFIG['ruby_version']}\""`
export GEM_HOME=$HOME/$RUBY_DIR


echo "-----> Installing Nanoc"
SITE_DIR=$CACHE_DIR/site
OUTPUT_DIR=$CACHE_DIR/output
GEM_DIR=$GEM_HOME

export LANG=en_US.UTF-8
export PATH=$GEM_DIR/bin:$PATH

# include .files when moving things around
shopt -s dotglob

cd $BUILD_DIR

# move site directory to site dir
rm -rf $SITE_DIR/*
mkdir -p $SITE_DIR
mv * $SITE_DIR

# set up gemrc
cat << EOF > ~/.gemrc
gem: --no-rdoc --no-ri
gemhome: $GEM_DIR
gempath:
- $GEM_DIR
EOF

cd $SITE_DIR

# check that we have nanoc site
if [ ! -f $SITE_DIR/Gemfile ]; then
    echo "Gemfile not found" | indent
    exit 1
fi

echo "-----> Compiling Nanoc site, environment: ${NANOC_ENVIRONMENT:-development}"

# set up nanoc config
cat << EOF >> $SITE_DIR/config.yaml
output_dir: $OUTPUT_DIR
enable_output_diff: false
EOF

# go go gadget nanoc!
$GEM_DIR/bin/bundle exec nanoc compile | indent

# and copy it back
cp -r $OUTPUT_DIR $BUILD_DIR/html


# =========> Nginx

# s3 packages
NGINX_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/nginx-${NGINX_VERSION}.tgz"

# vendor directories
VENDORED_NGINX=$(mktemp -d -t nginx.XXXXXX)

# download and upack packages
echo "-----> Fetching nginx binaries"
curl $NGINX_PACKAGE -s -o - | tar xzf - -C $VENDORED_NGINX

# vendor nginx into the slug
echo "-----> Vendoring nginx $NGINX_VERSION"
mkdir -p "$BUILD_DIR/bin"
cp "$VENDORED_NGINX/sbin/nginx" "$BUILD_DIR/bin/nginx"
mkdir -p "$BUILD_DIR/conf"
if [ ! -f "$SITE_DIR/conf/nginx.conf.erb" ]; then
  echo "Use nginx configuration in buildpack (conf/nginx.conf.erb)" | indent
  cp "$BUILDPACK_DIR/support/nginx.conf.erb" "$BUILD_DIR/conf/nginx.conf.erb"
else
  echo "Use nginx configuration in application (conf/nginx.conf.erb)" | indent
  cp "$SITE_DIR/conf/nginx.conf.erb" "$BUILD_DIR/conf/nginx.conf.erb"
  # use htaccess file (http passwords) if it's present in site directory
  if [ -f "$SITE_DIR/conf/htaccess" ]; then
    cp "$SITE_DIR/conf/htaccess" $BUILD_DIR/conf/htaccess"
  fi
fi

# build a startup script
cat <<EOF >"$BUILD_DIR/bin/start_nginx"
#!/usr/bin/env bash
erb conf/nginx.conf.erb > conf/nginx.conf
mkdir -p logs
touch logs/access.log logs/error.log
(tail -qF -n 0 --pid=\$\$ logs/*.log &)
exec bin/nginx -p .
EOF
chmod +x "$BUILD_DIR/bin/start_nginx"
